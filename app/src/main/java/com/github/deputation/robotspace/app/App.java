/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.github.deputation.robotspace.app;

import com.github.deputation.RobotExecutionException;
import com.github.deputation.RobotSpaceService;
import it.unicam.cs.followme.utilities.FollowMeParserException;

import java.io.File;
import java.io.IOException;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * This is the main class for the robotSpace application.
 * This application simulates a number of robots in a given environment and executes a given program for each robot.
 */
public class App {
    /**
     * Creates a new RobotSpaceService with the specified number of robots.
     *
     * @param numRobots The number of robots to be created.
     * @return A new instance of RobotSpaceService.
     */
    private static RobotSpaceService createRobotService(int numRobots) {
        return new RobotSpaceService(numRobots);
    }

    /**
     * Compiles the environment for the RobotSpaceService.
     * The environment can be specified as a string or as a file.
     *
     * @param service The RobotSpaceService instance.
     * @param type The type of the environment input, either "string" or "file".
     * @param environment The environment input, either a string or a file path.
     * @throws FollowMeParserException If there is an error parsing the environment.
     * @throws IOException If there is an error reading the environment file.
     */
    private static void compileEnvironment(RobotSpaceService service, String type, String environment) throws FollowMeParserException, IOException {
        if (type.equalsIgnoreCase("string")) {
            service.compileEnvironment(environment);
        } else if (type.equalsIgnoreCase("file")) {
            service.compileEnvironment(new File(environment));
        } else {
            throw new IllegalArgumentException("Environment type must be either 'string' or 'file'.");
        }
    }

    /**
     * Compiles the robot program for the RobotSpaceService.
     * The program can be specified as a string or as a file.
     *
     * @param service The RobotSpaceService instance.
     * @param type The type of the program input, either "string" or "file".
     * @param program The program input, either a string or a file path.
     * @throws FollowMeParserException If there is an error parsing the program.
     * @throws IOException If there is an error reading the program file.
     */
    private static void compileRobotProgram(RobotSpaceService service, String type, String program) throws FollowMeParserException, IOException {
        if (type.equalsIgnoreCase("string")) {
            service.compileRobotProgram(program);
        } else if (type.equalsIgnoreCase("file")) {
            service.compileRobotProgram(new File(program));
        } else {
            throw new IllegalArgumentException("Program type must be either 'string' or 'file'.");
        }
    }

    /**
     * Executes the simulation for the RobotSpaceService.
     *
     * @param service The RobotSpaceService instance.
     * @param millis The time per instruction in milliseconds.
     * @param simTime The simulation time per instruction in milliseconds.
     * @param action The action to be performed after each tick.
     * @throws RobotExecutionException If there is an error executing the robot program.
     */
    private static void execute(RobotSpaceService service, long millis, long simTime, Runnable action) throws RobotExecutionException {
        service.execute(millis, simTime, action);
    }

    /**
     * The main method for the RobotSpace application.
     * This method parses the command line arguments, sets up the environment and the robot program,
     * and starts the simulation.
     *
     * @param args The command line arguments.
     */
    public static void main(String[] args) {
            try {
                if (args.length < 7) {
                    throw new IllegalArgumentException("""
                            Not enough arguments.
                            Usage: <numRobots> <envType> <env> <progType> <prog> <tpi> <stpi>
                            
                            Arguments:
                                numRobots: Number of robots to simulate. Robots will be placed randomly in the grid according to the environment defined.
                                            If no environment is defined, all the robots will start at a random position, with x and y both being between (-10, 10).
                                
                                envType: Type of environment, string or file.
                                env: If the type was file, an absolute path to the file containing it. Otherwise a string, use \\n to separate new lines.
                                progType: Type of program, string or file.
                                prog: If the type was file, an absolute path to the file containing the program. Otherwise a string, use \\n to separate new lines.
                                tpi: Time per instruction (ms), how much time the program should sleep before executing the next instruction, can be 0, it will influence how the CONTINUE instruction works. Should be 1000ms by default.
                                stpi: Simulation time per instruction (ms), how much time should pass in the simulation for every instruction executed.
                            """);
                }

                int numRobots = Integer.parseInt(args[0]);
                var service = createRobotService(numRobots);

                parseAndCompileEnvironment(args, service);
                parseAndCompileRobotProgram(args, service);

                Integer millis = Integer.parseInt(args[5]);
                Integer simTime = Integer.parseInt(args[6]);

                AtomicInteger tickNumber = new AtomicInteger();

                execute(service, millis, simTime, () -> {
                    tickNumber.getAndIncrement();
                    System.out.println("Tick " + tickNumber.get() + " executed, printing robot state...");
                    service.getSwarm().forEach(r -> System.out.println(r.getState()));
                });
            } catch (FollowMeParserException | IOException e) {
                System.out.println(e.toString());
            } catch (RobotExecutionException e) {
                throw new RuntimeException(e);
            } catch (IllegalArgumentException e) {
                System.out.println("Invalid input: " + e.getMessage());
            }
        }

    /**
     * Parses and compiles the robot program for the RobotSpaceService.
     *
     * @param args The command line arguments.
     * @param service The RobotSpaceService instance.
     * @throws FollowMeParserException If there is an error parsing the program.
     * @throws IOException If there is an error reading the program file.
     */
    private static void parseAndCompileRobotProgram(String[] args, RobotSpaceService service) throws FollowMeParserException, IOException {
        String progType = args[3];
        String program = args[4];
        if (Objects.equals(progType, "string")) {
            program = program.replace("\\n", "\n");
        }
        compileRobotProgram(service, progType, program);
    }

    /**
     * Parses and compiles the environment for the RobotSpaceService.
     *
     * @param args The command line arguments.
     * @param service The RobotSpaceService instance.
     * @throws FollowMeParserException If there is an error parsing the environment.
     * @throws IOException If there is an error reading the environmentfile.
     */
    private static void parseAndCompileEnvironment(String[] args, RobotSpaceService service) throws FollowMeParserException, IOException {
        String envType = args[1];
        String environment = args[2];
        if (Objects.equals(envType, "string")) {
            environment = environment.replace("\\n", "\n");
        }
        compileEnvironment(service, envType, environment);
    }
}